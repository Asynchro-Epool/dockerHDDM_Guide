tidyr::unite(term, c('params', 'Identity', 'Valence')) %>%
tidyr::pivot_wider(names_from = c(term), values_from = value) %>%   # long to wide
dplyr::mutate(
# diff_GN_c_S = c_Self_Good - c_Self_Neutral,
# diff_BN_c_S = c_Self_Bad - c_Self_Neutral,
# diff_GN_c_O = c_Other_Good - c_Other_Neutral,
# diff_BN_c_O = c_Other_Bad - c_Other_Neutral,
diff_GN_dprm_S = dprime_Self_Good - dprime_Self_Neutral,
diff_BN_dprm_S = dprime_Self_Bad - dprime_Self_Neutral,
diff_GN_dprm_O = dprime_Other_Good - dprime_Other_Neutral,
diff_BN_dprm_O = dprime_Other_Bad - dprime_Other_Neutral,
diff_SO_dprm_G = dprime_Self_Good - dprime_Other_Good,
diff_SO_dprm_N =  dprime_Self_Neutral - dprime_Other_Neutral,
diff_SO_dprm_B =  dprime_Self_Bad - dprime_Other_Bad
) %>%
dplyr::select(condition, `.chain`, `.iteration`, `.draw`, Identity,
diff_GN_dprm_S, diff_BN_dprm_S, diff_GN_dprm_O, diff_BN_dprm_O,
diff_SO_dprm_G, diff_SO_dprm_N, diff_SO_dprm_B) %>%
tidyr::pivot_longer(cols = diff_GN_dprm_S:diff_SO_dprm_B, names_to = "term_diff", values_to =  "value") %>%  # wide to long
dplyr::mutate(term_diff = factor(term_diff, levels = c('diff_GN_dprm_S', 'diff_BN_dprm_S', 'diff_GN_dprm_O', 'diff_BN_dprm_O',
'diff_SO_dprm_G', 'diff_SO_dprm_N', 'diff_SO_dprm_B')))
df_ms_sdt_m1_plot_diff <- df_ms_sdt_m1_plot %>%
tidyr::unite(term, c('params', 'Identity', 'Valence')) %>%
tidyr::pivot_wider(names_from = c(term), values_from = value) %>%   # long to wide
dplyr::mutate(
# diff_GN_c_S = c_Self_Good - c_Self_Neutral,
# diff_BN_c_S = c_Self_Bad - c_Self_Neutral,
# diff_GN_c_O = c_Other_Good - c_Other_Neutral,
# diff_BN_c_O = c_Other_Bad - c_Other_Neutral,
diff_GN_dprm_S = dprime_Self_Good - dprime_Self_Neutral,
diff_BN_dprm_S = dprime_Self_Bad - dprime_Self_Neutral,
diff_GN_dprm_O = dprime_Other_Good - dprime_Other_Neutral,
diff_BN_dprm_O = dprime_Other_Bad - dprime_Other_Neutral,
diff_SO_dprm_G = dprime_Self_Good - dprime_Other_Good,
diff_SO_dprm_N =  dprime_Self_Neutral - dprime_Other_Neutral,
diff_SO_dprm_B =  dprime_Self_Bad - dprime_Other_Bad
) %>%
dplyr::select(condition, `.chain`, `.iteration`, `.draw`,
diff_GN_dprm_S, diff_BN_dprm_S, diff_GN_dprm_O, diff_BN_dprm_O,
diff_SO_dprm_G, diff_SO_dprm_N, diff_SO_dprm_B) %>%
tidyr::pivot_longer(cols = diff_GN_dprm_S:diff_SO_dprm_B, names_to = "term_diff", values_to =  "value") %>%  # wide to long
dplyr::mutate(term_diff = factor(term_diff, levels = c('diff_GN_dprm_S', 'diff_BN_dprm_S', 'diff_GN_dprm_O', 'diff_BN_dprm_O',
'diff_SO_dprm_G', 'diff_SO_dprm_N', 'diff_SO_dprm_B')))
# plot the posterior of the d prime
# use the overall mean values as the vlines
p_ms_sdt_vlines <- df_ms_sdt_m1_plot %>%
#tidyr::separate(term, c('params', 'Identity', 'Valence')) %>%
dplyr::mutate(Valence = factor(Valence, levels = c('Good', 'Neutral', 'Bad'))) %>%
dplyr::filter(params == 'dprime') %>%
dplyr::filter(condition == "Overall") %>%
dplyr::group_by(Identity, Valence) %>%
dplyr::summarize(Mean = mean(value)) # %>%
p_ms_dprime1_diff_v <- df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_dprm_S | _dprm_O'))
p_ms_dprime1_diff_v <- df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_dprm_S|_dprm_O'))
df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_dprm_S|_dprm_O')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x > 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Valence effect on", italic("d"), "prime", sep = ' ')))
df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_dprm_S|_dprm_O')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x > 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Valence effect on", italic("d"), "prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x > 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Valence effect on", italic("d"), "prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x > 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Self-referential effect", italic("d"), "prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x > 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Self-referential effect on ", italic("d"), " prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_dprime1 <- df_ms_sdt_m1_plot %>%
# tidyr::separate(term, c('params', 'Valence')) %>%
dplyr::mutate(Valence = factor(Valence, levels = c('Good', 'Neutral', 'Bad')),
Identity = factor(Identity, levels = c("Self", "Other"))) %>%
dplyr::filter(params == 'dprime') %>%
dplyr::rename(Experiments = condition) %>%
dplyr::filter((value >= 0) & (value <= 4)) %>%  # limit the x-axis's value
ggplot2::ggplot(aes(y = Experiments, x = value, color = Valence)) +
tidybayes::stat_halfeye(aes(fill = Valence), alpha = 0.7) +
facet_wrap(~Identity) +
geom_vline(data = p_ms_sdt_vlines, aes(xintercept = Mean,colour = Valence), linetype = "dashed") +
labs(x=expression('Posteior distribution of '~italic(d)~' prime')) +
theme_apa()
p_ms_dprime1
p_ms_dprime1
# THIS is the one which the final plot will based on!!!
p_ms_rt1 <- df_ms_m1_plot_rt %>%
tidyr::separate(term, c('Match', 'Identity', 'Valence')) %>%
dplyr::mutate(Valence = factor(Valence, levels = c('Good', 'Neutral', 'Bad')),
Identity = factor(Identity, levels = c("Self", "Other"))) %>%
dplyr::filter(Match == 'M') %>%
dplyr::rename(Experiments = condition) %>%
dplyr::filter((value >=200) & (value <=1200)) %>%
ggplot2::ggplot(aes(y = Experiments, x = value, color = Valence)) +
tidybayes::stat_halfeye(aes(fill = Valence), alpha = 0.7) +
geom_vline(data = p_ms_rt1_vlines, aes(xintercept = value, colour = Valence), linetype = "dashed") +
labs(x=expression('Posteior distribution of reaction times')) +
facet_wrap(~Identity) +
theme_apa()
p_ms_rt1
# plot the posterior of matching trials of valence
p_ms_rt1_diff_val <- df_ms_m1_plot_rt_diff %>%
dplyr::filter(str_detect(term_diff, '_M_')) %>%
dplyr::filter((value >= -200) & (value <= 200)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab("Effect of valence on RT (Match trials)") +
facet_wrap( ~ term_diff,
# scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_rt1_diff_val
p_ms_dprime1_diff_val <- df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_dprm_S|_dprm_O')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x > 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Valence effect on", italic("d"), "prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_dprime1_diff_val
df_ms_m1_plot_rt_diff <- df_ms_m1_plot_rt %>%
tidyr::pivot_wider(names_from = c(term), values_from = value) %>%   # long to wide
# calculate the difference between conditions, matched trials only
dplyr::mutate(diff_GN_M_S = M_Self_Good - M_Self_Neutral,               # calculate the differences between conditions
diff_BN_M_S = M_Self_Bad - M_Self_Neutral,
diff_GN_M_O = M_Other_Good - M_Other_Neutral,
diff_BN_M_O = M_Other_Bad - M_Other_Neutral,
diff_SO_G   = M_Self_Good - M_Other_Good,
diff_SO_N   = M_Self_Neutral - M_Other_Neutral,
diff_SO_B   = M_Self_Bad - M_Other_Bad) %>%
dplyr::select(condition, `.chain`, `.iteration`, `.draw`,
diff_GN_M_S, diff_BN_M_S, diff_GN_M_O,
diff_BN_M_O, diff_SO_G, diff_SO_B) %>%
tidyr::pivot_longer(cols = diff_GN_M_S:diff_SO_B, names_to = "term_diff", values_to =  "value")  %>%  # wide to long
dplyr::mutate(term_diff = factor(term_diff, levels = c('diff_GN_M_S','diff_BN_M_S', 'diff_GN_M_O', 'diff_BN_M_O',
'diff_SO_G', 'diff_SO_N', 'diff_SO_B')))
# plot the posterior of matching trials of valence
p_ms_rt1_diff_val <- df_ms_m1_plot_rt_diff %>%
dplyr::filter(str_detect(term_diff, '_M_')) %>%
dplyr::filter((value >= -200) & (value <= 200)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab("Effect of valence on RT (Match trials)") +
facet_wrap( ~ term_diff,
# scales = "free_y",
nrow = 1,
labeller = label_parsed)
# plot the posterior of matching trials, diff between self and other
p_ms_rt1_diff_id <- df_ms_m1_plot_rt_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
dplyr::filter((value >= -200) & (value <= 200)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab("Effect of valence on RT (Match trials)") +
facet_wrap( ~ term_diff,
# scales = "free_y",
nrow = 1,
labeller = label_parsed)
# (p_rt1 | p_dprime1)
p_rt1 + p_dprime1 +
p_rt1_diff + p_dprime1_diff + plot_annotation(tag_levels = 'A')  + plot_layout(nrow = 2, byrow = TRUE)
# (p_rt1 | p_dprime1)
p_ms_rt1 + p_ms_dprime1 +
p_ms_dprime1_diff_val + p_ms_rt1_diff_val +
p_ms_dprime1_diff_id + p_ms_rt1_diff_id + plot_annotation(tag_levels = 'A')  + plot_layout(nrow = 3, byrow = TRUE)
p_ms_dprime1_diff_id <- df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x > 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Self-referential effect on ", italic("d"), " prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_dprime1_diff_id
# plot the posterior of matching trials, diff between self and other
p_ms_rt1_diff_id <- df_ms_m1_plot_rt_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
dplyr::filter((value >= -200) & (value <= 200)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab("Self referential effect on RT (Match trials)") +
facet_wrap( ~ term_diff,
# scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_rt1_diff_id
df_ms_m1_plot_rt_diff <- df_ms_m1_plot_rt %>%
tidyr::pivot_wider(names_from = c(term), values_from = value) %>%   # long to wide
# calculate the difference between conditions, matched trials only
dplyr::mutate(diff_GN_M_S = M_Self_Good - M_Self_Neutral,               # calculate the differences between conditions
diff_BN_M_S = M_Self_Bad - M_Self_Neutral,
diff_GN_M_O = M_Other_Good - M_Other_Neutral,
diff_BN_M_O = M_Other_Bad - M_Other_Neutral,
diff_SO_G   = M_Self_Good - M_Other_Good,
diff_SO_N   = M_Self_Neutral - M_Other_Neutral,
diff_SO_B   = M_Self_Bad - M_Other_Bad) %>%
dplyr::select(condition, `.chain`, `.iteration`, `.draw`,
diff_GN_M_S, diff_BN_M_S, diff_GN_M_O,
diff_BN_M_O, diff_SO_G, diff_SO_B) %>%
tidyr::pivot_longer(cols = diff_GN_M_S:diff_SO_B, names_to = "term_diff", values_to =  "value")  %>%  # wide to long
dplyr::mutate(term_diff = factor(term_diff, levels = c('diff_GN_M_S','diff_BN_M_S', 'diff_GN_M_O', 'diff_BN_M_O',
'diff_SO_G', 'diff_SO_N', 'diff_SO_B')))
# plot the posterior of matching trials, diff between self and other
p_ms_rt1_diff_id <- df_ms_m1_plot_rt_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
dplyr::filter((value >= -200) & (value <= 200)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab("Self referential effect on RT (Match trials)") +
facet_wrap( ~ term_diff,
# scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_rt1_diff_id
df_ms_m1_plot_rt_diff <- df_ms_m1_plot_rt %>%
tidyr::pivot_wider(names_from = c(term), values_from = value) %>%   # long to wide
# calculate the difference between conditions, matched trials only
dplyr::mutate(diff_GN_M_S = M_Self_Good - M_Self_Neutral,               # calculate the differences between conditions
diff_BN_M_S = M_Self_Bad - M_Self_Neutral,
diff_GN_M_O = M_Other_Good - M_Other_Neutral,
diff_BN_M_O = M_Other_Bad - M_Other_Neutral,
diff_SO_G   = M_Self_Good - M_Other_Good,
diff_SO_N   = M_Self_Neutral - M_Other_Neutral,
diff_SO_B   = M_Self_Bad - M_Other_Bad) %>%
dplyr::select(condition, `.chain`, `.iteration`, `.draw`,
diff_GN_M_S, diff_BN_M_S, diff_GN_M_O,
diff_BN_M_O, diff_SO_G, diff_SO_N, diff_SO_B) %>%
tidyr::pivot_longer(cols = diff_GN_M_S:diff_SO_B, names_to = "term_diff", values_to =  "value")  %>%  # wide to long
dplyr::mutate(term_diff = factor(term_diff, levels = c('diff_GN_M_S','diff_BN_M_S', 'diff_GN_M_O', 'diff_BN_M_O',
'diff_SO_G', 'diff_SO_N', 'diff_SO_B')))
# plot the posterior of matching trials, diff between self and other
p_ms_rt1_diff_id <- df_ms_m1_plot_rt_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
dplyr::filter((value >= -200) & (value <= 200)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab("Self referential effect on RT (Match trials)") +
facet_wrap( ~ term_diff,
# scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_rt1_diff_id
# plot the posterior of matching trials of valence
p_ms_rt1_diff_val <- df_ms_m1_plot_rt_diff %>%
dplyr::filter(str_detect(term_diff, '_M_')) %>%
dplyr::filter((value >= -200) & (value <= 200)) %>%
ggplot2::ggplot(aes(y = condition, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab("Effect of valence on RT (Match trials)") +
facet_wrap( ~ term_diff,
# scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_rt1_diff_val
# (p_rt1 | p_dprime1)
p_ms_rt1 + p_ms_dprime1 +
p_ms_dprime1_diff_val + p_ms_rt1_diff_val +
p_ms_dprime1_diff_id + p_ms_rt1_diff_id + plot_annotation(tag_levels = 'A')  + plot_layout(nrow = 3, byrow = TRUE)
p_ms_rt1 + p_ms_dprime1 +
p_ms_dprime1_diff_val + p_ms_rt1_diff_val +
p_ms_dprime1_diff_id + p_ms_rt1_diff_id + plot_annotation(tag_levels = 'A')  + plot_layout(nrow = 3, byrow = TRUE)
df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
dplyr::rename(Experiments = condition) %>%
ggplot2::ggplot(aes(y = Experiments, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Self-referential effect on ", italic("d"), " prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
dplyr::rename(Experiments = condition) %>%
ggplot2::ggplot(aes(y = Experiments, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Self-referential effect on ", italic("d"), " prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_dprime1_diff_val <- df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_dprm_S|_dprm_O')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
dplyr::rename(Experiments = condition) %>%
ggplot2::ggplot(aes(y = Experiments, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Valence effect on", italic("d"), "prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_dprime1_diff_id <- df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
dplyr::rename(Experiments = condition) %>%
ggplot2::ggplot(aes(y = Experiments, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Self-referential effect on ", italic("d"), " prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
# plot the posterior of matching trials of valence
p_ms_rt1_diff_val <- df_ms_m1_plot_rt_diff %>%
dplyr::filter(str_detect(term_diff, '_M_')) %>%
dplyr::filter((value >= -200) & (value <= 200)) %>%
dplyr::rename(Experiments = condition) %>%
ggplot2::ggplot(aes(y = Experiments, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab("Effect of valence on RT (Match trials)") +
facet_wrap( ~ term_diff,
# scales = "free_y",
nrow = 1,
labeller = label_parsed)
# plot the posterior of matching trials, diff between self and other
p_ms_rt1_diff_id <- df_ms_m1_plot_rt_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
dplyr::filter((value >= -200) & (value <= 200)) %>%
dplyr::rename(Experiments = condition) %>%
ggplot2::ggplot(aes(y = Experiments, x = value, fill = stat(x < 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab("Self referential effect on RT (Match trials)") +
facet_wrap( ~ term_diff,
# scales = "free_y",
nrow = 1,
labeller = label_parsed)
# (p_rt1 | p_dprime1)
p_ms_rt1 + p_ms_dprime1 +
p_ms_dprime1_diff_val + p_ms_rt1_diff_val +
p_ms_dprime1_diff_id + p_ms_rt1_diff_id + plot_annotation(tag_levels = 'A')  + plot_layout(nrow = 3, byrow = TRUE)
p_ms_dprime1_diff_val <- df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_dprm_S|_dprm_O')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
dplyr::rename(Experiments = condition) %>%
ggplot2::ggplot(aes(y = Experiments, x = value, fill = stat(x > 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Valence effect on ", italic("d"), " prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
p_ms_dprime1_diff_id <- df_ms_sdt_m1_plot_diff %>%
dplyr::filter(str_detect(term_diff, '_SO_')) %>%
#dplyr::filter(!str_detect(term_diff, '_GB_')) %>%
# tidyr::unite(term_diff, c('Identity', 'term_diff')) %>%
dplyr::filter((value >= -1.5) & (value <= 1.5)) %>%
dplyr::rename(Experiments = condition) %>%
ggplot2::ggplot(aes(y = Experiments, x = value, fill = stat(x > 0))) +
tidybayes::stat_halfeye() +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_fill_manual(values = c('gray80', 'skyblue')) +
xlab(expression(paste("Self-referential effect on ", italic("d"), " prime", sep = ' '))) +
facet_wrap( ~ term_diff, # scales = "free_y",
nrow = 1,
labeller = label_parsed)
# (p_rt1 | p_dprime1)
p_ms_rt1 + p_ms_dprime1 +
p_ms_dprime1_diff_val + p_ms_rt1_diff_val +
p_ms_dprime1_diff_id + p_ms_rt1_diff_id + plot_annotation(tag_levels = 'A')  + plot_layout(nrow = 3, byrow = TRUE)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
library(posterior)
check_cmdstan_toolchain()
install_cmdstan(cores = 8)
cmdstan_path()
cmdstan_version()
setwd('/media/hcp4715/T3/Exp_Statistics/Rethinking')
setwd('./trans_CN')
getwd()
setwd("/home/hcp4715/HCP_could/Exp_Modelling_DDM/tutorial/temp")
setwd("/home/hcp4715/HCP_cloud/Exp_Modelling_DDM/tutorial/temp")
setwd("/home/hcp4715/HCP_cloud/Exp_Modelling/DDM/tutorial/temp")
setwd("/home/hcp4715/HCP_cloud/Exp_Modeling/DDM/tutorial/temp")
df <- read.csv('df_HC_0_bf.csv')
library(bayestestR)
View(df)
df <- read.csv('df_HC_0_bf.csv')
View(df)
library(bayestestR)
bayesfactor_parameters(posterior = df$posterior, prior = df$prior, null = 0)
install.packages('logspline)
install.packages('logspline')
bayesfactor_parameters(posterior = df$posterior, prior = df$prior, null = 0)
bayesfactor_parameters(posterior = df$posterior, prior = df$prior, null = 0, plot=TRUE)
plot(bayesfactor_parameters(posterior = df$posterior, prior = df$prior, null = 0) )
install.packages('see')
plot(bayesfactor_parameters(posterior = df$posterior, prior = df$prior, null = 0) )
print(bayesfactor_parameters(posterior = df$posterior, prior = df$prior, null = 0, plot=TRUE))
bayesfactor_parameters(posterior = df$posterior, prior = df$prior, null = 0, plot=TRUE)
plot(bayesfactor_parameters(posterior = df$posterior, prior = df$prior, null = 0) )
df <- read.csv('df_HC_0_bf.csv')
library(bayestestR)
df <- read.csv('df_HC_0_bf.csv')
bayesfactor_parameters(posterior = df$posterior, prior = df$prior, null = 0, plot=TRUE)
View(df)
bayesfactor_parameters(posterior = df$posterior, prior = df$prior_def, null = 0, plot=TRUE)
bayesfactor_parameters(posterior = df$posterior, prior = df$prior_inf, null = 0, plot=TRUE)
.logspline
?logspline
?dlogspline
dlogspline(0, df$posterior)
logspline::dlogspline(0, df$posterior)
logspline::dlogspline(0, logspline::logspline(df$posterior))
logspline::dlogspline(0, logspline::logspline(df$prior_def))
logspline::dlogspline(0, logspline::logspline(df$prior_inf))
plot(logspline::logspline(df$prior_inf)))
plot(logspline::logspline(df$prior_inf))
plot(logspline::logspline(rnorm(5000)))
logspline::plogspline(0, logspline::logspline(df$posterior))
logspline::plogspline(0, logspline::logspline(df$prior_def))
logspline::plogspline(0, logspline::logspline(df$prior_inf))
logspline::plogspline(0, logspline::logspline(df$posterior))/logspline::plogspline(0, logspline::logspline(df$prior_def))
logspline::plogspline(0, logspline::logspline(df$posterior))/logspline::plogspline(0, logspline::logspline(df$prior_inf))
bayesfactor_parameters(posterior = df$posterior, prior = df$prior_def, null = 0, plot=TRUE)
logspline::plogspline(0, logspline::logspline(df$posterior))/logspline::plogspline(0, logspline::logspline(df$prior_def))
logspline::plogspline(0, logspline::logspline(df$posterior))/logspline::plogspline(0, logspline::logspline(df$prior_inf))
bayesfactor_parameters(posterior = df$posterior, prior = df$prior_inf, null = 0, plot=TRUE)
